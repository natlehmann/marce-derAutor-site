<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/batch  http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/task  http://www.springframework.org/schema/task/spring-task-3.2.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<mvc:annotation-driven>
	    <mvc:message-converters>
	        <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
	            <property name="supportedMediaTypes">
	                <list>
	                    <value>image/jpeg</value>
	                    <value>image/png</value>
	                </list>
	            </property>
	        </bean>
	    </mvc:message-converters>
	</mvc:annotation-driven>
	
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/images/" mapping="/images/**"/>
	<mvc:resources location="/fonts/" mapping="/fonts/**"/>

	<context:component-scan base-package="ar.com.marcelomingrone.derechosAutor.estadisticas.controllers" />
	<context:component-scan base-package="ar.com.marcelomingrone.derechosAutor.estadisticas.dao" />
	<context:component-scan base-package="ar.com.marcelomingrone.derechosAutor.estadisticas.servicios" />
	
	<context:property-placeholder location="classpath:configuracion.properties"/>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/jsp/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="2048000"/>
	</bean>
	
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	         <property name="basename" value="classpath:messages"/>
	         <property name="defaultEncoding" value="UTF-8"/>
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://${db.host}:3306/${db.schema}" />
		<property name="username" value="${db.user}" />
		<property name="password" value="${db.password}" />
	</bean>
	

	<!-- Hibernate Session Factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<array>
				<value>ar.com.marcelomingrone.derechosAutor.estadisticas.modelo</value>
			</array>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
			</value>
		</property>
	</bean>

	<!-- Hibernate Transaction Manager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Activates annotation based transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	
	
	<bean id="dataSourceExterno" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driverClass.ext}" />
		<property name="url" value="jdbc:${db.protocol.ext}://${db.host.ext}:${db.port.ext}${db.schema.ext}" />
		<property name="username" value="${db.user.ext}" />
		<property name="password" value="${db.password.ext}" />
	</bean>
	
	<bean id="sessionFactoryExterno" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSourceExterno" />
		<property name="packagesToScan">
			<array>
				<value>ar.com.marcelomingrone.derechosAutor.estadisticas.modelo.data</value>
			</array>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${db.dialect.ext}
				hibernate.show_sql=true
			</value>
		</property>
	</bean>
	
	<bean id="transactionManagerExterno"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactoryExterno" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManagerExterno" />
	
	
	
	
	<!-- Envio de mails -->
	<bean id="smtpAuthenticator" class="ar.com.marcelomingrone.derechosAutor.estadisticas.servicios.SmtpAuthenticator">
		<constructor-arg value="${smtp.username}" />
		<constructor-arg value="${smtp.password}" />
	</bean>
	
	<bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
		<constructor-arg>
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.socketFactory.port">${smtp.port}</prop>
				<prop key="mail.smtp.socketFactory.class">${smtp.socket.factory}</prop>
				<prop key="mail.smtp.socketFactory.fallback">false</prop>
				<prop key="mail.debug">${mail.debug}</prop>
				<prop key="mail.smtp.ssl.trust">*</prop>
				<prop key="content.type">text/plain; charset=UTF-8</prop>
			</props>
		</constructor-arg>
		<constructor-arg ref="smtpAuthenticator" />
	</bean>
		
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${smtp.hostname}" />
		<property name="port" value="${smtp.port}" />		
		<property name="session" ref="mailSession" />
	</bean>
	
	<bean id="fromAddress" class="javax.mail.internet.InternetAddress">
		<constructor-arg value="${mail.from}" />
	</bean>
	
	<bean id="mimeMessage" class="javax.mail.internet.MimeMessage">
		<constructor-arg ref="mailSession" />
	</bean>
	
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		  <property name="corePoolSize" value="5" />
		  <property name="maxPoolSize" value="10" />
		  <property name="queueCapacity" value="25" />
	</bean>
	
	
	<!-- Cache -->
	
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		  <property name="caches">
		    <set>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="rankingMasCobrados" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="rankingMasCobradosCount" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosPorAutor" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="rankingMasEjecutados" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="rankingMasEjecutadosCount" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="ejecucionesPorAutor" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="paises" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="fuentes" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="derechos" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="anios" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="autores" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="canciones" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="cancionesCount" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosSACMPorAnio" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosOtrosPorAnio" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosSACMPorTrimestre" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosOtrosPorTrimestre" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosSACMPorPais" />
		      </bean>
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosOtrosPorPais" />
		      </bean>
		      
		      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
		      		<property name="name" value="montosPorFuente" />
		      </bean>
		    </set>
		  </property>
	</bean>
	
<!-- 	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhcacheCacheManager"> -->
<!-- 		<property name="cache-manager" value="ehcache" /> -->
<!-- 	</bean>  -->
 
<!-- 	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" > -->
<!-- 		<property name="config-location" value="ehcache.xml" /> -->
<!-- 	</bean> -->

	
	
	<!-- Batch jobs -->
	
	<!--  

	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:org/springframework/batch/core/schema-drop-mysql.sql" />
		<jdbc:script location="classpath:org/springframework/batch/core/schema-mysql.sql" />
	</jdbc:initialize-database>
	
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="mysql" />
	</bean>
	
	<task:executor id="pooledExecutor" />
	
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="pooledExecutor" />
	</bean>

	<bean id="datosCancionDao"
		class="ar.com.marcelomingrone.derechosAutor.estadisticas.dao.DatosCancionDao">
		<beans:property name="sessionFactory" ref="sessionFactory" />	
	</bean>

	<batch:job id="importacionJob">
		<batch:step id="inicializarHistorial" next="borrarDatosAnteriores">
			<batch:tasklet>
				<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.InicializarHistorial" scope="step">
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="borrarDatosAnteriores" next="importarNuevosDatos">
			<batch:tasklet>
				<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.BorrarDatosPrevioImportacion">
					<beans:property name="datosCancionDao" ref="datosCancionDao" />	
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="importarNuevosDatos" next="procesarRankingsMasEjecutados">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="mysqlItemWriter" commit-interval="100">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="procesarRankingsMasEjecutados" next="procesarRankingsMasCobrados">
			<batch:tasklet>
				<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.ProcesarRankingsMasEjecutados" scope="step">
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="procesarRankingsMasCobrados" next="cerrarHistorial">
			<batch:tasklet>
				<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.ProcesarRankingsMasCobrados" scope="step">
				</bean>
			</batch:tasklet>
		</batch:step>
		<batch:step id="cerrarHistorial">
			<batch:tasklet>
				<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.CerrarHistorial" scope="step">
				</bean>
			</batch:tasklet>
		</batch:step>
	</batch:job>


	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">

		<property name="resource" value="file://${importacion.home}/#{jobParameters['nombreArchivo']}" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="companyId,idPais,nombrePais,fecha,formatId,idCancion,nombreCancion,idAutor,nombreAutor,idFuente,nombreFuente,rightName,copyRightShares,unidades,externalCode,currencyFactor,localCurrency" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="ar.com.marcelomingrone.derechosAutor.estadisticas.batch.DatosCancionMapper" />
				</property>
			</bean>
		</property>

	</bean>


	<bean id="mysqlItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter">
	    <property name="targetObject" ref="datosCancionDao" />
	    <property name="targetMethod" value="guardar" />
	</bean>
	
	-->
	
</beans>